use api::RedeemPromocodeResponse;
use chrono::Local;
use gloo::storage::Storage;
use shadow_clone::shadow_clone;
use wasm_bindgen::JsCast;
use web_sys::HtmlInputElement;
use yew::prelude::*;
use yew_bootstrap::{
    component::{
        form::{FormControl, FormControlType, FormControlValidation},
        Button, Spinner,
    },
    util::Color,
};
use yew_hooks::use_async;
use yew_router::hooks::use_navigator;

use crate::{url_macro::url, Route};

#[function_component(RedeemPromocodeWidget)]
pub fn redeem_promocode_widget() -> Html {
    let navigator = use_navigator().unwrap();
    let profile_key: Result<Option<String>, gloo::storage::errors::StorageError> =
        gloo::storage::LocalStorage::get("token");
    let profile_key: Option<String> = match profile_key {
        Ok(key) => key,
        Err(_) => None,
    };
    let token = if let Some(t) = profile_key {
        t
    } else {
        navigator.push(&Route::Profile);
        String::new()
    };

    let code_state = use_state(|| String::new());

    let oninput = {
        shadow_clone!(code_state);
        move |ev: InputEvent| {
            let target: HtmlInputElement = ev.target().unwrap().dyn_into().unwrap();
            code_state.set(target.value());
        }
    };

    let redeem_result: yew_hooks::prelude::UseAsyncHandle<RedeemPromocodeResponse, String> =
        use_async({
            shadow_clone!(code_state);
            async move {
                Ok({
                    let code = (*code_state).clone();
                    let client = reqwest::Client::default();
                    client
                        .post(url!("/api/user-info/{token}/redeem/{code}"))
                        .send()
                        .await
                        .map_err(|v| v.to_string())?
                        .json::<RedeemPromocodeResponse>()
                        .await
                        .map_err(|v| v.to_string())?
                })
            }
        });

    let start = {
        shadow_clone!(redeem_result);
        move |_ev| {
            redeem_result.run();
        }
    };

    let validation = match &redeem_result.data {
        Some(v) => match v {
            RedeemPromocodeResponse::Ok {
                promocode_value,
                user_balance_after,
            } => FormControlValidation::Valid(Some(format!("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–∏–ª–∏ –±–∞–ª–∞–Ω—Å –Ω–∞ {promocode_value:.3}êÜò! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å {user_balance_after:.3}êÜò, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç.").into())),
            RedeemPromocodeResponse::AlreadyRedeemed {
                when_unix_time,
                by_me,
            } => FormControlValidation::Invalid({
                let when = chrono::DateTime::from_timestamp(*when_unix_time as i64, 0)
                    .expect("failed to parse incoming unix time as date")
                    .with_timezone(&Local)
                    .to_string();
                match by_me {
                true => format!("–í—ã —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ –≤ {when}."),
                false => format!("–≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –∫–µ–º-—Ç–æ –µ—â–µ –≤ {when}. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.")
            }.into()
            }),
            RedeemPromocodeResponse::NotFound => FormControlValidation::Invalid(
                "–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥. –°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
                    .into(),
            ),
        },
        None => match &redeem_result.error {
            Some(why) => FormControlValidation::Invalid(
                format!("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {why}").into(),
            ),
            None => FormControlValidation::None,
        },
    };

    html! {
        <>
        <h3>{"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"}</h3>
            <FormControl id="promocode" ctype={FormControlType::Text} class="mb-3" label="–ü—Ä–æ–º–æ–∫–æ–¥" {oninput} value={(*code_state).clone()} disabled={&redeem_result.loading} validation={validation.clone()}/>

            <Button style={Color::Primary} disabled={&redeem_result.loading} onclick={start}>
                if redeem_result.loading {
                    <Spinner small={true}  />
                    {"–ê–∫—Ç–∏–≤–∏—Ä—É–µ–º..."}
                }
                else {
                    {"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å"}
                }
            </Button>

        </>
    }
}
